<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="DOS Attack" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">SampleResult.setIgnore();</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">@Grab(&apos;org.yaml:snakeyaml:1.17&apos;)

import org.yaml.snakeyaml.Yaml;
import org.apache.jmeter.services.FileServer;
import tools.User;
import tools.API

String baseDir = FileServer.getFileServer().getBaseDir();

Yaml ymlparser = new Yaml();

//Parsing main config data
Map config = ymlparser.load((baseDir+&quot;/../../../../config/apim.yaml&quot; as File).text);

Map managementConsole = config.find{it.key==&quot;management_console&quot;}?.value;

String gatewayProtocol = managementConsole.find{it.key==&quot;protocol&quot;}?.value;
String gatewayHost = managementConsole.find{it.key==&quot;host&quot;}?.value
String gatewayServeletPort = managementConsole.find{it.key==&quot;servlet_transport_port_https&quot;}?.value;
String gatewayServeletPortHTTP = managementConsole.find{it.key==&quot;servlet_transport_port_http&quot;}?.value;
Map apiManager = config.find{it.key==&quot;api_manager&quot;}?.value;
String nioPtTransportPort = apiManager.find{it.key==&quot;nio_pt_transport_port&quot;}?.value;

List apis = config.find{it.key==&quot;apis&quot;}?.value;

//Parsing attack tool configurations
Map attackConfig = ymlparser.load((baseDir+&quot;/../../../../config/attack-tool.yaml&quot; as File).text);
Map generalConfig = attackConfig.find{it.key==&quot;general_config&quot;}?.value;
List userAgents = generalConfig.find{it.key==&quot;user_agents&quot;}?.value;
String attackDurationPerApi = generalConfig.find{it.key==&quot;attack_duration&quot;}?.value;
String scenarioName = generalConfig.find{it.key==&quot;scenario&quot;}?.value;

//Parsing user_ips,tokens and cookies for the scenario
File csvfile = new File(baseDir + &quot;/../../../traffic-tool/data/scenario/&quot; + scenarioName + &quot;/token_ip_cookie.csv&quot; );
List lines =csvfile.readLines();
int i = 1;
ArrayList userList = new ArrayList()
for(line in lines)
{
	String[] userData = line.split(&quot;,&quot;);
	//ip,cookie,token,apiname
	User tempUser = new User(userData[2],userData[3],userData[0],userData[1]);
	userList.add(tempUser);
	vars.putObject(&quot;user_&quot; + i,tempUser)
	i++;
	
}


ArrayList apiList = new ArrayList()
i = 1;
for(api in apis)
{
	API temp = new API(api[&quot;name&quot;],api[&quot;context&quot;],api[&quot;version&quot;].toString(),api[&quot;resources&quot;]);
	temp.buildUserList(userList);
	vars.putObject(&quot;api_&quot; + i,temp);
	i++;
	apiList.add(temp);
}



vars.put(&quot;baseDir&quot;,baseDir);
vars.put(&quot;gatewayProtocol&quot;, gatewayProtocol);
vars.put(&quot;gatewayHost&quot;, gatewayHost);
vars.put(&quot;gatewayServeletPort&quot;, gatewayServeletPort);
vars.put(&quot;nioPtTransportPort&quot;, nioPtTransportPort);
vars.putObject(&quot;userAgents&quot;,userAgents)
vars.put(&quot;attackDurationPerApi&quot;,attackDurationPerApi)

// Making the column names of the csv
String logString = &quot;TimeStamp,Connection,Authorization,accept,client-ip,x-forwarded-for,Content-Type,Host,Response Code,User-agent\n&quot;;
File dataSetCSV = new File(baseDir + &quot;/../../../../dataset/attack/DDOS.csv&quot; );
FileWriter fw = new FileWriter(dataSetCSV,false);
fw.write(logString);
fw.close();

//vars.putObject(&quot;apiList&quot;,apiList)
//vars.putObject(&quot;userList&quot;,userList)
//log.info(vars.get(&quot;userAgents&quot;).toString());
//log.info(gatewayProtocol)



//log.info( scenario_base_path );
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">long attackDurationPerAPI = Integer.parseInt(vars.get(&quot;attackDurationPerApi&quot;));
long currentTime = System.currentTimeMillis();
long stopTime = currentTime + attackDurationPerAPI.intValue() * 1000;
vars.put(&quot;TestStopTime&quot;,&quot;&quot;+stopTime);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
          <stringProp name="ForeachController.inputVal">api</stringProp>
          <stringProp name="ForeachController.returnVal">apiInstance</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="ResultCollector.success_only_logging">true</boolProp>
          </ResultCollector>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import tools.API
import tools.User

API currentAPI = vars.getObject(&quot;apiInstance&quot;)

//Random rand = new Random();
//def randomResource = currentAPI.getResources().get(rand.nextInt(currentAPI.getResources().size()))
vars.put(&quot;currentAPIName&quot;,currentAPI.getName());
vars.put(&quot;currentAPIContext&quot;,currentAPI.getContext());
vars.put(&quot;currentAPIVersion&quot;,currentAPI.getVersion());
//vars.put(&quot;currentAPIResourceMethod&quot;,randomResource.get(&quot;method&quot;).toString())
//vars.put(&quot;currentAPIResourcePath&quot;,randomResource.get(&quot;path&quot;).toString());
vars.putObject(&quot;currentAPIUsers&quot;,currentAPI.getUserList())
vars.putObject(&quot;currentAPIResources&quot;,currentAPI.getResources())

//def userAgents = vars.getObject(&quot;userAgents&quot;);
//vars.putObject(&quot;currentUserAgents&quot;,userAgents)
//log.info(vars.get(&quot;currentAPIResourceMethod&quot;).equals(&quot;GET&quot;).toString());
//log.info(vars.get(&quot;currentAPIUsers&quot;).toString());
log.info(currentAPI.getName());</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
            <stringProp name="WhileController.condition">${__javaScript(( ${__time(,)} &lt;= ${TestStopTime}), )}</stringProp>
          </WhileController>
          <hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import tools.User;

def users = vars.getObject(&quot;currentAPIUsers&quot;);

Random rand = new Random();
Random rand2 = new Random();
User randomUser = users.get(rand.nextInt(users.size()))

vars.put(&quot;randomUserIP&quot;,randomUser.getIp());
vars.put(&quot;randomUserCookie&quot;,randomUser.getCookie());
vars.put(&quot;randomUserToken&quot;,randomUser.getToken());
vars.put(&quot;randomUserApiName&quot;,randomUser.getApiName());

def userAgents = vars.getObject(&quot;userAgents&quot;);
def randomUserAgent = userAgents.get(rand.nextInt(userAgents.size()));
vars.put(&quot;randomUserAgent&quot;,randomUserAgent)


def currentApiResources = vars.getObject(&quot;currentAPIResources&quot;);
def randomResource = currentApiResources.get(rand2.nextInt(currentApiResources.size()));
vars.put(&quot;currentAPIResourceMethod&quot;,randomResource.get(&quot;method&quot;).toString());
vars.put(&quot;currentAPIResourcePath&quot;,randomResource.get(&quot;path&quot;).toString());
//int duration = vars.get(&quot;attackDurationPerApi&quot;)
//log.info(randomUserAgent.toString());
//log.info((vars.get(&quot;currentAPIResourceMethod&quot;)))</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller GET" enabled="true">
              <stringProp name="IfController.condition">//${__groovy(vars.get(&quot;currentAPIResourceMethod&quot;).equals(&quot;GET&quot;),)}
//${currentAPIResourceMethod} == &quot;GET&quot;
${__groovy(&quot;${currentAPIResourceMethod}&quot;==&quot;GET&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP GET" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${gatewayHost}</stringProp>
                <stringProp name="HTTPSampler.port">${nioPtTransportPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">${gatewayProtocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${currentAPIContext}/${currentAPIVersion}/${currentAPIResourcePath}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${randomUserToken}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">client-ip</stringProp>
                      <stringProp name="Header.value">${randomUserIP}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-forwarded-for</stringProp>
                      <stringProp name="Header.value">${randomUserIP}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">cookie</stringProp>
                      <stringProp name="Header.value">${randomUserCookie}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">${randomUserAgent}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                  <collectionProp name="CookieManager.cookies"/>
                  <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                </CookieManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller POST" enabled="true">
              <stringProp name="IfController.condition">//${__groovy(vars.get(&quot;currentAPIResourceMethod&quot;).equals(&quot;GET&quot;),)}
//${currentAPIResourceMethod} == &quot;GET&quot;
${__groovy(&quot;${currentAPIResourceMethod}&quot;==&quot;POST&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP POST" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${gatewayHost}</stringProp>
                <stringProp name="HTTPSampler.port">${nioPtTransportPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">${gatewayProtocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${currentAPIContext}/${currentAPIVersion}/${currentAPIResourcePath}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Athorization </stringProp>
                      <stringProp name="Header.value">Bearer  ${randomUserToken}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">client-ip</stringProp>
                      <stringProp name="Header.value">${randomUserIP}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-forwarded-for</stringProp>
                      <stringProp name="Header.value">${randomUserIP}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">cookie</stringProp>
                      <stringProp name="Header.value">${randomUserCookie}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">${randomUserAgent}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                  <collectionProp name="CookieManager.cookies"/>
                  <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                </CookieManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller PUT" enabled="true">
              <stringProp name="IfController.condition">//${__groovy(vars.get(&quot;currentAPIResourceMethod&quot;).equals(&quot;GET&quot;),)}
//${currentAPIResourceMethod} == &quot;GET&quot;
${__groovy(&quot;${currentAPIResourceMethod}&quot;==&quot;PUT&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP PUT" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${gatewayHost}</stringProp>
                <stringProp name="HTTPSampler.port">${nioPtTransportPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">${gatewayProtocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${currentAPIContext}/${currentAPIVersion}/${currentAPIResourcePath}</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${randomUserToken}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">client-ip</stringProp>
                      <stringProp name="Header.value">${randomUserIP}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-forwarded-for</stringProp>
                      <stringProp name="Header.value">${randomUserIP}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">cookie</stringProp>
                      <stringProp name="Header.value">${randomUserCookie}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">${randomUserAgent}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                  <collectionProp name="CookieManager.cookies"/>
                  <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                </CookieManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller DELETE" enabled="true">
              <stringProp name="IfController.condition">//${__groovy(vars.get(&quot;currentAPIResourceMethod&quot;).equals(&quot;GET&quot;),)}
//${currentAPIResourceMethod} == &quot;GET&quot;
${__groovy(&quot;${currentAPIResourceMethod}&quot;==&quot;DELETE&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP DELETE" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${gatewayHost}</stringProp>
                <stringProp name="HTTPSampler.port">${nioPtTransportPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">${gatewayProtocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${currentAPIContext}/${currentAPIVersion}/${currentAPIResourcePath}</stringProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${randomUserToken}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">client-ip</stringProp>
                      <stringProp name="Header.value">${randomUserIP}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-forwarded-for</stringProp>
                      <stringProp name="Header.value">${randomUserIP}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">cookie</stringProp>
                      <stringProp name="Header.value">${randomUserCookie}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">${randomUserAgent}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                  <collectionProp name="CookieManager.cookies"/>
                  <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                </CookieManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller PATCH" enabled="true">
              <stringProp name="IfController.condition">//${__groovy(vars.get(&quot;currentAPIResourceMethod&quot;).equals(&quot;GET&quot;),)}
//${currentAPIResourceMethod} == &quot;GET&quot;
${__groovy(&quot;${currentAPIResourceMethod}&quot;==&quot;PATCH&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP PATCH" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${gatewayHost}</stringProp>
                <stringProp name="HTTPSampler.port">${nioPtTransportPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">${gatewayProtocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${currentAPIContext}/${currentAPIVersion}/${currentAPIResourcePath}</stringProp>
                <stringProp name="HTTPSampler.method">PATCH</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${randomUserToken}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">client-ip</stringProp>
                      <stringProp name="Header.value">${randomUserIP}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-forwarded-for</stringProp>
                      <stringProp name="Header.value">${randomUserIP}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">cookie</stringProp>
                      <stringProp name="Header.value">${randomUserCookie}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">${randomUserAgent}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                  <collectionProp name="CookieManager.cookies"/>
                  <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                </CookieManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
              <stringProp name="TestPlan.comments">Record the attack dataset</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.jmeter.protocol.http.sampler.HTTPSampleResult;
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy;
import org.apache.jmeter.protocol.http.control.HeaderManager;

//Extracting header data and response code from request
HTTPSamplerProxy previousSampler = ctx.getPreviousSampler();
CookieManager cookieManager = previousSampler.getCookieManager();
HTTPSampleResult previousResult = (HTTPSampleResult)ctx.getPreviousResult();

def headers = previousResult.getRequestHeaders().split(&quot;\n&quot;);
def responseCode = previousResult.getResponseCode();

// Forming the csv string
String dataString = &quot;&quot;;
String userAgent;
String timeStamp = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy h:mm:ss a&quot;).format(new Date());

dataString += timeStamp + &quot;,&quot;

for (header in headers)
{
	values = header.split(&quot;: &quot;);
	if(values[0].equals(&quot;User-Agent&quot;))
	{
		userAgent = values[1];
		continue;
	}
	dataString += values[1] + &quot;,&quot; ;
	//log.info(header.toString())
}

dataString += responseCode + &quot;,&quot;;
dataString += userAgent;
dataString += &quot;\n&quot;;

//writing the string to DDOS.csv
baseDir = vars.get(&quot;baseDir&quot;);
log.info(baseDir);
File dataSetCSV = new File( baseDir + &quot;/../../../../dataset/attack/DDOS.csv&quot;);
FileWriter fw = new FileWriter(dataSetCSV,true);
fw.write(dataString);
fw.close();</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">long attackDurationPerAPI = Integer.parseInt(vars.get(&quot;attackDurationPerApi&quot;));
long currentTime = System.currentTimeMillis();
long stopTime = currentTime + attackDurationPerAPI.intValue() * 1000;
vars.put(&quot;TestStopTime&quot;,&quot;&quot;+stopTime);</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
