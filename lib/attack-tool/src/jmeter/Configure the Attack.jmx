<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Configure the Attack" enabled="true">
      <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
        <boolProp name="LoopController.continue_forever">false</boolProp>
        <stringProp name="LoopController.loops">1</stringProp>
      </elementProp>
      <stringProp name="ThreadGroup.num_threads">1</stringProp>
      <stringProp name="ThreadGroup.ramp_time">1</stringProp>
      <boolProp name="ThreadGroup.scheduler">false</boolProp>
      <stringProp name="ThreadGroup.duration"></stringProp>
      <stringProp name="ThreadGroup.delay"></stringProp>
    </ThreadGroup>
    <hashTree>
      <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
        <stringProp name="scriptLanguage">groovy</stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="script">SampleResult.setIgnore();</stringProp>
      </JSR223Sampler>
      <hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor " enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">@Grab(&apos;org.yaml:snakeyaml:1.17&apos;)

import org.yaml.snakeyaml.Yaml;
import org.apache.jmeter.services.FileServer;
import tools.User;
import tools.API

String baseDir = FileServer.getFileServer().getBaseDir()

Yaml ymlparser = new Yaml()

//Main config data
Map config = ymlparser.load((baseDir+&quot;/../../../../config/apim.yaml&quot; as File).text)
Map managementConsole = config.find{it.key==&quot;management_console&quot;}?.value
String gatewayProtocol = managementConsole.find{it.key==&quot;protocol&quot;}?.value
String gatewayHost = managementConsole.find{it.key==&quot;host&quot;}?.value
String gatewayServeletPort = managementConsole.find{it.key==&quot;servlet_transport_port_https&quot;}?.value
String gatewayServeletPortHTTP = managementConsole.find{it.key==&quot;servlet_transport_port_http&quot;}?.value
Map apiManager = config.find{it.key==&quot;api_manager&quot;}?.value
String nioPtTransportPort = apiManager.find{it.key==&quot;nio_pt_transport_port&quot;}?.value
List apis = config.find{it.key==&quot;apis&quot;}?.value

//attack tool configurations
Map attackConfig = ymlparser.load((baseDir+&quot;/../../../../config/attack-tool.yaml&quot; as File).text)
Map generalConfig = attackConfig.find{it.key==&quot;general_config&quot;}?.value
List userAgents = generalConfig.find{it.key==&quot;user_agents&quot;}?.value
String attackDurationPerApi = generalConfig.find{it.key==&quot;attack_duration&quot;}?.value
Map dosConfig = attackConfig.find{it.key==&quot;DOS_attack&quot;}?.value
String scenarioName = generalConfig.find{it.key==&quot;scenario&quot;}?.value

//Parsing user ips,tokens and cookies
File csvfile = new File(baseDir + &quot;/../../../traffic-tool/data/scenario/&quot; + scenarioName + &quot;/token_ip_cookie.csv&quot; )
List lines =csvfile.readLines()
int i = 1;
ArrayList userList = new ArrayList()
for(line in lines)
{
	String[] userData = line.split(&quot;,&quot;);
	
	//ip,cookie,token,apiname
	User tempUser = new User(userData[2],userData[3],userData[0],userData[1]);
	userList.add(tempUser);
	i++;
	
}

//Creating API instances 
ArrayList apiList = new ArrayList()
i = 1;
Random rand = new Random();
for(api in apis)
{
	API temp = new API(api[&quot;name&quot;],api[&quot;context&quot;],api[&quot;version&quot;].toString(),api[&quot;resources&quot;]);
	temp.buildUserList(userList);
	// Selecting a random user per API for DOS attack
	def users = temp.getUserList();
	User randomUser = users.get(rand.nextInt(users.size()))
	temp.setSingleUser(randomUser);
	i++;
	apiList.add(temp);
}


// Creating properties to be used in the threads
props.put(&quot;baseDir&quot;,baseDir);
props.put(&quot;gatewayProtocol&quot;, gatewayProtocol);
props.put(&quot;gatewayHost&quot;, gatewayHost);
props.put(&quot;gatewayServeletPort&quot;, gatewayServeletPort);
props.put(&quot;nioPtTransportPort&quot;, nioPtTransportPort);
props.put(&quot;userAgents&quot;,userAgents);
props.put(&quot;attackDurationPerApi&quot;,attackDurationPerApi);
props.put(&quot;apiList&quot;,apiList);



//Defining column names in the data set
String logString = &quot;TimeStamp,URL,Connection,Authorization,accept,client-ip,x-forwarded-for,Content-Type,Host,Response Code,User-agent\n&quot;;
File dataSetCSV = new File(baseDir + &quot;/../../../../dataset/attack/DOS.csv&quot; );
FileWriter fw = new FileWriter(dataSetCSV,false);
fw.write(logString);
fw.close();


//log.info(vars.get(&quot;userAgents&quot;).toString());
//log.info(gatewayProtocol)
//log.info( scenario_base_path );
</stringProp>
          <stringProp name="TestPlan.comments">Parse configurations, instantiate API and User objects </stringProp>
        </JSR223PreProcessor>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
